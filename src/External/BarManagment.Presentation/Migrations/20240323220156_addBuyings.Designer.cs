// <auto-generated />
using System;
using BarManagment.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarManagment.Persistance.Migrations
{
    [DbContext(typeof(BarDbContext))]
    [Migration("20240323220156_addBuyings")]
    partial class addBuyings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.BarmenSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BarmenSchedule");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Buying", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("CommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PurchaseAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.ToTable("Buying", t =>
                        {
                            t.HasCheckConstraint("CK_BuyingAvailableAmount_GreaterOrEqualZero", "AvailableAmount >= 0");

                            t.HasCheckConstraint("CK_BuyingPurchaseAmount_GreaterOrEqualZero", "PurchaseAmount >= 0");
                        });
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Coctail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Coctail");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.CoctailIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountInDefaultMeasure")
                        .HasColumnType("float");

                    b.Property<Guid>("CoctailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoctailId");

                    b.HasIndex("CommodityId");

                    b.ToTable("CoctailIngredient");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Commodity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultMeasureId");

                    b.ToTable("Commodity");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.DefaultMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DefaultMeasure");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountInDefaultMeasure")
                        .HasColumnType("float");

                    b.Property<Guid>("CommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarmenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PaidTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BarmenId");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_passwordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CoctailReceipt", b =>
                {
                    b.Property<Guid>("CoctailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoctailsId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("CoctailReceipt");
                });

            modelBuilder.Entity("DrinkReceipt", b =>
                {
                    b.Property<Guid>("DrinksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DrinksId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("DrinkReceipt");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.BarmenSchedule", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.User", null)
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Buying", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.CoctailIngredient", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.Coctail", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("CoctailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BarManagment.Domain.DomainEntities.Commodity", null)
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Commodity", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.DefaultMeasure", "DefaultMeasure")
                        .WithMany()
                        .HasForeignKey("DefaultMeasureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultMeasure");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Drink", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Commodity");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Receipt", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.User", null)
                        .WithMany()
                        .HasForeignKey("BarmenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoctailReceipt", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.Coctail", null)
                        .WithMany()
                        .HasForeignKey("CoctailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarManagment.Domain.DomainEntities.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrinkReceipt", b =>
                {
                    b.HasOne("BarManagment.Domain.DomainEntities.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarManagment.Domain.DomainEntities.Receipt", null)
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.Coctail", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("BarManagment.Domain.DomainEntities.User", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
